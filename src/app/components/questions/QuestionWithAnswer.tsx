"use client";

import { useState, useEffect, useRef } from 'react';
import { isQuestionBookmarked, isQuestionCompleted, markQuestionAsCompleted } from '@/app/utils/progress';
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

// Import the new components
import { QuestionHeader } from './QuestionHeader';
import { AnswerDisplay } from './AnswerDisplay';
import { ResourceList } from './ResourceList';

// Define QuestionType locally based on usage in topics/page.tsx
type QuestionType = {
  id: number;
  question_text: string;
  answer_text?: string | null;
  keywords?: string[] | string | null;
  difficulty?: string | null;
  category_id?: number | null;
  topic_id?: number | null;
};

interface QuestionWithAnswerProps {
  question: QuestionType;
  questionIndex: number;
  isHighlighted?: boolean;
}

export function QuestionWithAnswer({ question, questionIndex, isHighlighted = false }: QuestionWithAnswerProps) {
  // Initialize Supabase client
  const supabase = createClientComponentClient();

  const [isExpanded, setIsExpanded] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedAnswer, setGeneratedAnswer] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [isViewed, setIsViewed] = useState(false);
  const [isBookmarked, setIsBookmarked] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const answerRef = useRef<HTMLDivElement | null>(null);
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const hasPredefinedAnswer = question.answer_text &&
                             !question.answer_text.toLowerCase().includes('generated by ai');

  const questionId = question.id;

  useEffect(() => {
    if (question.id) {
      console.log(`Checking status for question ${question.id}`);

      try {
        const localStorageCompletedQuestions = JSON.parse(localStorage.getItem('completedQuestions') || '[]');
        const sessionStorageCompletedQuestions = JSON.parse(sessionStorage.getItem('completedQuestions') || '[]');
        if (localStorageCompletedQuestions.includes(question.id) || 
            sessionStorageCompletedQuestions.includes(question.id)) {
          console.log(`Question ${question.id} found in client storage as completed`);
          setIsCompleted(true);
        }
      } catch (err) {
        console.error('Error checking client storage:', err);
      }

      isQuestionBookmarked(question.id)
        .then(bookmarked => {
          setIsBookmarked(bookmarked);
        })
        .catch(err => console.error('Failed to check bookmark status:', err));
      
      if (!isCompleted) {
        fetch(`/api/user/progress/status?questionId=${question.id}`, { headers: { 'Cache-Control': 'no-store' } })
        .then(response => response.json())
        .then(data => {
          if (data.status === 'completed') {
            setIsCompleted(true);
            try {
              const completedQuestions = JSON.parse(localStorage.getItem('completedQuestions') || '[]');
              if (!completedQuestions.includes(question.id)) {
                completedQuestions.push(question.id);
                localStorage.setItem('completedQuestions', JSON.stringify(completedQuestions));
              }
            } catch (err) {
              console.error('Error updating localStorage after API check:', err);
            }
          }
        })
        .catch(err => {
          console.error(`Error checking status for question ${question.id}:`, err);
        });
      }
    }
  }, [question.id, isCompleted]);

  useEffect(() => {
    if (isExpanded && !isViewed && question.id) {
      fetch('/api/user/progress', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          questionId: question.id, 
          status: 'viewed',
          topicId: question.topic_id || null,
          categoryId: question.category_id || null
        }),
      })
      .then(() => setIsViewed(true))
      .catch(err => console.error('Failed to mark question as viewed:', err));
    }
  }, [isExpanded, isViewed, question.id, question.topic_id, question.category_id]);

  useEffect(() => {
    const answerIsReady = isExpanded && 
                         ((hasPredefinedAnswer && question.answer_text) || 
                          (!hasPredefinedAnswer && generatedAnswer && !isGenerating));

    if (!answerIsReady || !answerRef.current || !question.id) return;

    const answerElement = answerRef.current;
    setScrollProgress(0);

    const calculateScrollProgress = () => {
      if (!answerElement) return;
      const totalHeight = answerElement.scrollHeight - answerElement.clientHeight;
      if (totalHeight <= 0) {
        setScrollProgress(10);
        return;
      }
      const scrollPosition = answerElement.scrollTop;
      const percentage = Math.min(Math.round((scrollPosition / totalHeight) * 100), 100);
      setScrollProgress(percentage);

      console.log(`Question ${question.id} scroll progress: ${percentage}%, isCompleted: ${isCompleted}`);

      if (percentage >= 90 && !isCompleted && question.id) {
        console.log(`Scroll progress reached ${percentage}%, marking question ${question.id} as completed`);
        markQuestionAsCompleted(question.id, question.topic_id || 0, question.category_id || 0)
          .then((success) => {
            if (success) {
              setIsCompleted(true);
              console.log(`Question ${question.id} marked as completed in database`);
              try {
                const completedQuestions = JSON.parse(localStorage.getItem('completedQuestions') || '[]');
                if (!completedQuestions.includes(question.id)) {
                  completedQuestions.push(question.id);
                  localStorage.setItem('completedQuestions', JSON.stringify(completedQuestions));
                  console.log(`Question ${question.id} added to localStorage completed list`);
                }
              } catch (storageError) { console.error('Error updating localStorage:', storageError); }
              try {
                const completedSessionQuestions = JSON.parse(sessionStorage.getItem('completedQuestions') || '[]');
                 if (!completedSessionQuestions.includes(question.id)) {
                    completedSessionQuestions.push(question.id);
                    sessionStorage.setItem('completedQuestions', JSON.stringify(completedSessionQuestions));
                    console.log(`Added question ${question.id} to completedQuestions in sessionStorage`);
                 }
              } catch (storageError) { console.error('Error storing completed question in session storage:', storageError); }
              try {
                window.dispatchEvent(new CustomEvent('questionCompleted', { detail: { questionId: question.id, categoryId: question.category_id, status: 'completed', timestamp: Date.now() } }));
                console.log('Dispatched questionCompleted event');
              } catch (eventError) { console.error('Error dispatching completion event:', eventError); }
            } else { console.error(`Failed to mark question ${question.id} as completed`); }
          })
          .catch(err => { console.error('Failed to mark question as completed:', err); });
      }
    };

    const handleScroll = () => {
      if (scrollTimeoutRef.current) clearTimeout(scrollTimeoutRef.current);
      scrollTimeoutRef.current = setTimeout(calculateScrollProgress, 100);
    };

    const initialTimer = setTimeout(calculateScrollProgress, 500);
    answerElement.addEventListener('scroll', handleScroll);

    return () => {
      if (scrollTimeoutRef.current) clearTimeout(scrollTimeoutRef.current);
      clearTimeout(initialTimer);
      if (answerElement) answerElement.removeEventListener('scroll', handleScroll);
    };
  }, [isExpanded, question.id, question.topic_id, question.category_id, generatedAnswer, hasPredefinedAnswer, isGenerating, question.answer_text, isCompleted]);

  useEffect(() => {
    if (isExpanded && !hasPredefinedAnswer && !generatedAnswer && !isGenerating && !error) {
      const generateAnswer = async () => {
        setIsGenerating(true);
        setError(null);
        try {
          console.log(`Generating answer for question: ${question.id} - ${question.question_text}`);
          const response = await fetch('/api/generate-answer', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ questionText: question.question_text, questionId: question.id }),
          });
          const data = await response.json();
          console.log("API Response:", data);
          if (!response.ok) {
            setError(data.message || data.error || 'Failed to generate answer');
            setGeneratedAnswer(null);
          } else if (data.answer === null && data.message) {
            setError(data.message);
            setGeneratedAnswer(null);
          } else {
            setGeneratedAnswer(data.answer || 'No answer content received.');
          }
        } catch (err: unknown) { 
          console.error("Generation fetch error:", err);
          setError(err instanceof Error ? err.message : 'An unexpected error occurred.');
          setGeneratedAnswer(null);
        } finally { setIsGenerating(false); }
      };
      generateAnswer();
    }
  }, [isExpanded, hasPredefinedAnswer, generatedAnswer, isGenerating, error, question.id, question.question_text]);

  const toggleExpansion = () => {
    setIsExpanded(!isExpanded);
    if (isExpanded) {
      setError(null);
    }
  };

  const handleBookmarkChange = (newBookmarkStatus: boolean) => {
    setIsBookmarked(newBookmarkStatus);
  };

  const displayKeywords = (keywords: string[] | string | null | undefined): string => {
    if (!keywords) return '';
    if (Array.isArray(keywords)) return keywords.join(', ');
    return keywords; 
  };

  const handleSetAnswerRef = (el: HTMLDivElement | null) => {
    answerRef.current = el;
  };

  console.log(`Rendering QuestionWithAnswer for question ${question.id}, isCompleted=${isCompleted}`);

  return (
    <div 
      id={`question-${question.id}`}
      className={`mb-4 p-4 rounded-lg shadow-sm border transition-all duration-300 ${
        isHighlighted 
          ? 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-400 dark:border-yellow-600 ring-2 ring-yellow-400/50' 
          : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700'
      }`}
    >
      <QuestionHeader
        questionId={questionId}
        topicId={question.topic_id ?? null}
        categoryId={question.category_id ?? null}
        questionText={question.question_text}
        questionIndex={questionIndex}
        isCompleted={isCompleted}
        isBookmarked={isBookmarked}
        isExpanded={isExpanded}
        onToggleExpansion={toggleExpansion}
        onBookmarkChange={handleBookmarkChange} 
      />

      <div className="mt-2 text-xs text-gray-500 dark:text-gray-400">
        <span className="inline-block bg-gray-200 dark:bg-gray-700 rounded px-2 py-1 mr-2">
          {question.difficulty || 'unspecified'} difficulty
        </span>
        {question.keywords && (
          <span className="inline-block">
            Keywords: {displayKeywords(question.keywords)}
          </span>
        )}
      </div>

      {isExpanded && (
        <div id={`answer-content-q-${questionId}`} className="mt-4">
          {/* Display additional resources first */}
          <ResourceList questionId={questionId} />
          
          <AnswerDisplay
            answerText={(hasPredefinedAnswer ? question.answer_text : generatedAnswer) ?? null}
            isLoading={isGenerating}
            error={error}
            scrollProgress={scrollProgress}
            isCompleted={isCompleted}
            setAnswerRef={handleSetAnswerRef}
          />
        </div>
      )}
    </div>
  );
}